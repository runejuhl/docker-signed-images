#!/bin/bash
#
# Build a Docker image and sign it using GPG, adding the signature of the last
# intermediate layer to a new image. Using the new image it's possible to verify
# the author of a given Docker image without relying on external services.
#
# Author: Rune Juhl Jacobsen <runejuhl@petardo.dk>
#
# shellcheck disable=SC2222 disable=SC2221 disable=SC2086

set -euo pipefail

declare -a TMP_FILES=()
declare ARGS='' COMMAND='' DOCKERFILE
declare GPG="gpg ${GPG_KEY:+--default-key=$GPG_KEY}"

declare -r ACTION="${1}"
shift

function image-get-parent() {
  docker inspect "${1}" | jq -r '.[0].Parent' | cut -d: -f2
}

function layer-get-fullhash() {
  docker inspect "${1}" | jq -r '.[0].Id' | cut -d: -f2
}

function layer-get-manifest() {
  docker save "${1}" | tar axf - --to-stdout manifest.json
}

function layer-get-parent-layer() {
  layer-get-manifest "${1}" | jq -r '.[0].Layers|.[-1]'
}

function image-get-signature() {
  PARENT_LAYER=$(layer-get-parent-layer $1)
  PARENT_IMAGE=$(image-get-parent $1)
  # docker save "${1}" | tar axf - --to-stdout ${PARENT_LAYER} | tar -at
  SIGNATURE=$(docker save "${1}" | tar axf - --to-stdout ${PARENT_LAYER} | tar -ax .well-known/signature/${PARENT_IMAGE}.asc --to-stdout)
  echo "${SIGNATURE}"
}

function image-verify-signature() {
  gpg --verify <(image-get-signature "${1}") <(docker save "$(image-get-parent "${1}")")
}

# function layer-compare-signature() {
#   CHILD="$1"
#   PARENT=$(layer-compare-signature "${CHILD}")

# }

function build-get-shorthash() {
  tail -n1 | grep 'Successfully built ' | cut -d' ' -f3
}

function remove-tmp-files() {
  # FIXME: why is this var always empty?
  if [[ "${#TMP_FILES[*]}" -gt 0 ]]; then
    rm -v "${TMP_FILES[*]}"
  fi
}

function _mktemp() {
  TMP_FILE="$(mktemp ${1:+--tmpdir=${1}})"
  TMP_FILES+=("${TMP_FILE}")
  echo $TMP_FILE
}

function parse-args() {
  # loop over all arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      # if the argument is the dockerfile we set the DOCKERFILE variable and do
      # not augment the ARGS variable with this; this makes it possible for us to
      # set it later
      -f|--file)
        DOCKERFILE="${2}"
        shift 2
        ;;
      # any other argument is added to the command
      *)
        ARGS="${ARGS} ${1}"
        shift
        # if [[ $# -eq 0 ]]; then
        #   break
        # fi
        # ARGS="${ARGS} ${1}"
        ;;&
    esac
  done

  DOCKERFILE_DIR="$(dirname "$(readlink -f "${DOCKERFILE}")")"
}

trap remove-tmp-files INT EXIT

case "$ACTION" in
  build)
    parse-args "$@"
    ;;&
  # when building images we want to generate the target, and from that create a
  # GPG signature that we inject into a derivate image
  build)

    # temp file for image shorthash and signature
    LAYER_SHORTHASH_FILE=$(_mktemp)
    LAYER_SIGNATURE_FILE=$(_mktemp "${DOCKERFILE_DIR}")

    # we use pee to have progress output from docker and grep for and put the
    # resulting image shorthash into the designated file
    COMMAND="docker ${ACTION} --file ${DOCKERFILE} ${ARGS}"
    eval $COMMAND | pee cat "tail -n1 | grep 'Successfully built ' | cut -d' ' -f3 > ${LAYER_SHORTHASH_FILE}"
    LAYER_FULLHASH=$(layer-get-fullhash "$(cat "${LAYER_SHORTHASH_FILE}")")

    # sign the image
    docker save "${LAYER_FULLHASH}" | $GPG --armor --detach-sign --output - - >  "${LAYER_SIGNATURE_FILE}"

    # derivate Dockerfile that we modify to include signature
    DOCKERFILE_WITH_SIGNATURE=$(_mktemp "${DOCKERFILE_DIR}")
    cp "${DOCKERFILE}" "${DOCKERFILE_WITH_SIGNATURE}"
    cat >> "${DOCKERFILE_WITH_SIGNATURE}" <<EOF
ADD $(basename ${LAYER_SIGNATURE_FILE}) /.well-known/signature/${LAYER_FULLHASH}.asc
EOF

    # build derivate image
    docker build --file ${DOCKERFILE_WITH_SIGNATURE} ${ARGS}
    ;;
  verify)
    IMAGE="$1"

    image-verify-signature $IMAGE
    ;;
  *)
    COMMAND="docker ${ACTION} ${ARGS}"
    eval $COMMAND
    ;;
esac
